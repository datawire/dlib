#!/usr/bin/env bash

{
	levels=(
		Error
		Warn
		Info
		Debug
		Trace
	)
	declare -A aliases=(
		[Print]=Info
		[Warning]=Warn
	)

	cat <<-EOT
	// Code generated by "$0". DO NOT EDIT.

	package dlog

	import (
		"context"
		"fmt"
	)
	EOT
	emit() {
		local lvlAlias=$1
		local lvlReal=$2
		# If you change any of these, you should also change context.go.
		cat <<-EOT
		func ${lvlAlias}(ctx context.Context, args ...interface{}) {
			l := getLogger(ctx)
			l.Helper()
			l.Log(LogLevel${lvlReal}, fmt.Sprint(args...))
		}
		func ${lvlAlias}ln(ctx context.Context, args ...interface{}) {
			l := getLogger(ctx)
			l.Helper()
			l.Log(LogLevel${lvlReal}, sprintln(args...))
		}
		func ${lvlAlias}f(ctx context.Context, format string, args ...interface{}) {
			l := getLogger(ctx)
			l.Helper()
			l.Log(LogLevel${lvlReal}, fmt.Sprintf(format, args...))
		}
		EOT
	}
	for lvl in "${levels[@]}"; do
		emit "$lvl" "$lvl"
	done
	for alvl in "${!aliases[@]}"; do
		emit "$alvl" "${aliases[${alvl}]}"
	done
} | gofmt
